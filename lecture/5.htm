<!DOCTYPE html>
<!-- saved from url=(0029)http://0.0.0.0:8080/lecture/5 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Recitation5</title>
<link rel="stylesheet" type="text/css" href="./lecture5_files/style.css">
</head>
<body>
<h1 id="recitation5:therealtypesystem">Recitation 5: The <em>Real</em> Type System</h1>

<p>Abstraction. You’ve been studying it all quarter long.</p>

<p>It’s when we isolate away all the nitty-gritty details that we don’t care about and just focus on the matter of hand. We assert that all these other important things are taken care of by people smarter than us, and we assert that we are just responsible for this one tiny bit of code.</p>

<p>A perfect example is <code>cs1lib</code>. We have provided you a list of functions, like <code>draw_rect</code> which draws a rectangle. How does <code>draw_rect</code> work? Don’t worry about it. It’s abstracted away. You don’t care how it works. For now, you’re given this tool, and you use it freely.</p>

<p>But as you progress through Computer Science, you start peeling back layers of abstraction – all the way down to the Operating System level, if not further. We’ve been peeling back these layers of abstraction week after week, and it’s time to pull back the final layer of abstraction on types.</p>

<p>At least, the final layer that we will be discussing in CS1.</p>

<p>Yes, this means that after this lecture we will <em>finally</em> have a complete picture of what the typing system in Python is and how it works.</p>

<h2 id="recap">Recap</h2>

<p>We started out with defining primitive types. These included things like strings, integers, and floating points. The basic point of teaching this is to explain how call by <em>value</em> works – in other words, when you pass a parameter that is called by value, a copy of its value is given to the formal parameter. <em>Not</em> the actual parameter.</p>

<p>We then introduced complex types for things like lists. Here, we have call by reference, where the actual reference is given as the parameter, so when you make changes to the object you are referencing, you are changing the actual parameter as well as the formal parameter.</p>

<p>This explains the mystery of the following code:</p>

<pre><code>a = [1, 2, 3]

def stuff(some_list):
    some_list.append(4)

assert(4 in a)
</code></pre>

<h2 id="callbyobject">Call By Object</h2>

<p>Okay great, so we’re all on the same page. Unfortunately, everything I just told you was a lie. Sort of. <code>:)</code></p>

<p>This is yet another moment of peeling back layers of abstraction. Up until now, you had no idea what objects were, so if I told you Python used call by object, it would have been nonsense.</p>

<p><strong>Everything in Python is an object. Everything.</strong> Furthermore, there are two types of objects: mutable and immutable.</p>

<p>A <strong>mutable</strong> object is one that can be changed. For example, a list is a mutable object. A list can be appended to, elements can be deleted, etc. There are many things that can be done to the list, as we saw in the above code example.</p>

<p>An <strong>immutable</strong> object is one that <em>cannot</em> be changed.</p>

<p>Let’s take a string for example. In <em>some</em> languages, there is a type called character, and a string is nothing more than a list of characters. In fact, they are interchangeable. Python is not one of those languages.</p>

<p>It may <em>seem</em> like it.</p>

<pre><code>bro1 = "Why weren't you in class today?"
bro2 = "What? We never have class on Fridays."
bro3 = "Dude... Today is Monday..."

print bro1[0]
print bro2[-1]
print len(bro3)
</code></pre>

<p>Strange, isn’t it? I can take a length of a string, I can index into it… I seem to be able to do everything that I could with a regular list! Nope. There is <em>one</em> thing you can’t do.</p>

<pre><code>bro1[0] = 'H'
</code></pre>

<p>This gives you the following error</p>

<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object does not support item assignment
</code></pre>

<p>A <code>TypeError</code>! Ah-ha! We’ve seen that before. Python is saying you’ve confused the type <code>str</code> for a mutable type, which it is not. Strings are unchangeable! But then… how does this happen?</p>

<pre><code>a = "'Sup..."
a = "Well hello there, my good fellow."
</code></pre>

<p>You might think that, well hey! <code>a</code> is of type <code>str</code>, and it changed its value! Doesn’t that mean that strings can change value?</p>

<p>Nope! Remember, everything is an object. That means that somewhere in your computer’s memory, there is an object that has the value <code>'Sup...</code>. <code>a</code>, however, is just a variable that points to the address in memory where that object exists. So when you try and do</p>

<pre><code>a[0] = 'H'
</code></pre>

<p>you’re trying to change the value of the object. But when you do</p>

<pre><code>a = "Something else"
</code></pre>

<p>you’re not changing <code>'Sup...</code>. Instead, you’re saying “Hey variable <code>a</code>, forget about that other object <code>'Sup...</code>. Instead, I want you to point to this <em>new</em> object I’ve created.”</p>

<p>Python has no problem with that, and it will happily let you point <code>a</code> to a new object!</p>

<p>If this is still confusing, think about it like this. Python doesn’t <em>really</em> have variables. Variables generally <em>hold</em> information. Instead, Python has <em>names</em>. You can associate every object with one or more names. So when I do</p>

<pre><code>a = [1, 2, 3, 4]
b = a
</code></pre>

<p>I haven’t created <em>two</em> lists, right? No of course not. Instead, I’ve given the object <code>[1, 2, 3, 4]</code> <em>two</em> names, so now Python knows when I refer to <code>a</code> or <code>b</code>, I’m actually referring to that list object. So when I first have</p>

<pre><code>a = "Something"
</code></pre>

<p>and then change it to</p>

<pre><code>a = "Something else"
</code></pre>

<p>it’s not the string <em>object</em> I’m changing; instead, I’m just taking the <em>name</em> <code>a</code> and assigning it to a different object instead! (Python doesn’t allow multiple different objects to have the same name. That would be super confusing…)</p>

<p>So what’s call by object? Well, it’s just call by value but for objects! Call by object is used when an object is immutable. Example?</p>

<ul>
<li>Integer</li>
<li>String</li>
<li>Floating Point</li>
<li>Function</li>
<li>NoneType</li>
<li>Tuple</li>
</ul>

<p>If the object is <em>mutable</em> (so far we’ve only seen lists, but we’ll see others), Python uses call by object <em>reference</em>, where it passes not a copy of the object but the actual reference to the area in memory where the object lives.</p>

<p>This means that for the most part, <strong>the objects and classes you define are using call by object reference</strong>, and not call by object.</p>

<h2 id="implications">Implications</h2>

<p>You might think this is not an important difference, but it leads to some interesting results that call by value and call by reference alone cannot explain. Let’s take an example.</p>

<p>In Python, you can give functions default arguments, like so.</p>

<pre><code>def action_russia(olympics=False):
    if olympics:
        return "invade Crimea"
</code></pre>

<p>Whenever you call <code>action_russia</code> without a parameter, it will assign <code>olympics</code> to be <code>False</code>; otherwise, it overrides the <code>False</code> with the given value.</p>

<p>Pretty neat! This way you can effectively have two <code>action_russia</code> functions – one that takes no parameters, and another that takes one parameter.</p>

<p>But what happens when you give a <em>mutable</em> type as the default value? Unexpected things.</p>

<pre><code>def action_russia(action, list_of_actions=[]):
    print "Russia will do: " + action
    list_of_actions.append(action)
    return list_of_actions
</code></pre>

<p>Simple enough. Let’s call the function and see what happens.</p>

<pre><code>some_list = action_russia("Mother Russia awaits the global Communist revolution.")
print some_list
</code></pre>

<p>Great. We provide an action and call <code>action_russia</code> without the second parameter, meaning it starts out as an empty list. That means that <code>some_list</code>, which is returned by <code>action_russia</code>, should be a list containing a single element – <code>"Mother Russia awaits the global Communist revolution."</code>. Is that what happens?</p>

<pre><code>['Mother Russia awaits the global Communist revolution.']
</code></pre>

<p>Great! So everything works, right? Not quite. Let’s see what happens when I do this…</p>

<pre><code>some_new_list = action_russia("Invade Ukraine.")
print some_list
</code></pre>

<p>So it should <em>only</em> have <code>"Invade Ukraine."</code> in the list, right?</p>

<pre><code>['Mother Russia awaits the global Communist revolution.', 'Invade Ukraine.']
</code></pre>

<p>Erm.. What?</p>

<p>As it turns out, function objects are immutable. The default <code>[]</code> that we put in the function header are created when the function is defined – once, and only <em>once</em>. Which means that every time afterwards it is referring to the <em>same</em> object.</p>

<p>This is one of the many reasons call by object is <em>not</em> the same as call by value or call by reference. Now that you know objects, we no longer need to refer to this by the <em>incorrect</em> names “call by value” or “call by reference”.</p>

<p>Let me be clear: call by value and call by reference <em>do</em> exist in many languages (Java, for one); and they are helpful to know for future purposes and for conceptual clarity. But in Python, we have <strong>call by object</strong> and <strong>call by object reference</strong>.</p>

</body></html>